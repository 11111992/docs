<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting started with `pack` on Cloud Native Buildpack Documentation</title>
    <link>/docs/using-pack/</link>
    <description>Recent content in Getting started with `pack` on Cloud Native Buildpack Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/using-pack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building app images with `build`</title>
      <link>/docs/using-pack/building-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/building-app/</guid>
      <description>pack build enables app developers to create runnable app images from source code using buildpacks.
$ pack build &amp;lt;image-name&amp;gt;  Example: Building using the default builder image In the following example, an app image is created from Node.js application source code.
$ cd /path/to/node/app $ pack build my-app:my-tag # ... Detect, analyze and build output Successfully built 2452b4b1fce1 Successfully tagged my-app:my-tag  In this case, the default builder is used, and an appropriate buildpack is automatically selected from the builder based on the app source code.</description>
    </item>
    
    <item>
      <title>Updating app images using `rebase`</title>
      <link>/docs/using-pack/update-app-rebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/update-app-rebase/</guid>
      <description>Updating app images using rebase The pack rebase command allows app developers to rapidly update an app image when its stack&amp;rsquo;s run image has changed. By using image layer rebasing, this command avoids the need to fully rebuild the app.
$ pack rebase &amp;lt;image-name&amp;gt;  Example: Rebasing an app image Consider an app image my-app:my-tag that was originally built using the default builder. That builder&amp;rsquo;s stack has a run image called pack/run.</description>
    </item>
    
    <item>
      <title>Working with builders `create-builder`</title>
      <link>/docs/using-pack/working-with-builders/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/working-with-builders/</guid>
      <description>Working with builders using create-builder pack create-builder enables buildpack authors and platform operators to bundle a collection of buildpacks into a single image for distribution and use with a specified stack.
$ pack create-builder &amp;lt;image-name&amp;gt; --builder-config &amp;lt;path-to-builder-toml&amp;gt;  Example: Creating a builder from buildpacks In this example, a builder image is created from buildpacks org.example.buildpack-1 and org.example.buildpack-2. A builder.toml file provides necessary configuration to the command.
[[buildpacks]] id = &amp;quot;org.</description>
    </item>
    
    <item>
      <title>Managing stacks</title>
      <link>/docs/using-pack/managing-stacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/using-pack/managing-stacks/</guid>
      <description>Managing stacks As mentioned previously, a stack is associated with a build image and a run image. Stacks in pack&amp;rsquo;s configuration can be managed using the following commands:
$ pack add-stack &amp;lt;stack-name&amp;gt; --build-image &amp;lt;build-image-name&amp;gt; --run-image &amp;lt;run-image-name1,run-image-name2,...&amp;gt;  $ pack update-stack &amp;lt;stack-name&amp;gt; --build-image &amp;lt;build-image-name&amp;gt; --run-image &amp;lt;run-image-name1,run-image-name2,...&amp;gt;  $ pack delete-stack &amp;lt;stack-name&amp;gt;  $ pack set-default-stack &amp;lt;stack-name&amp;gt;   Technically, a stack can be associated with multiple run images, as a variant is needed for each registry to which an app image might be published when using --publish.</description>
    </item>
    
  </channel>
</rss>